{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_BUYER, FETCH_BUYER_SUCCESS, FETCH_BUYER_FAILURE, FETCH_BUYER_BY_ID_SUCCESS, FETCH_ALL_BUYERS_SUCCESS, CREATE_BUYER_SUCCESS, UPDATE_BUYER_SUCCESS } from '../../actionTypes';\nimport hostServerJSON from \"../hostServer.json\";\nconst hostServer = hostServerJSON.path;\nexport const fetchBuyer = (page = 1, limit = 10) => async dispatch => {\n  dispatch({\n    type: FETCH_BUYER\n  });\n  try {\n    const response = await axios.get(`${hostServer}buyer/?page=${page}&limit=${limit}`);\n    dispatch({\n      type: FETCH_BUYER_SUCCESS,\n      payload: {\n        ...response.data,\n        currentPage: page,\n        limit\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_BUYER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const fetchBuyerById = buyerId => async dispatch => {\n  dispatch({\n    type: FETCH_BUYER,\n    payload: buyerId\n  });\n  try {\n    const response = await axios.get(`${hostServer}buyer/${buyerId}/`);\n    dispatch({\n      type: FETCH_BUYER_BY_ID_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_BUYER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const fetchAllBuyers = () => async dispatch => {\n  dispatch({\n    type: FETCH_BUYER\n  });\n  try {\n    const response = await axios.get(`${hostServer}buyer/withoutPag`);\n    dispatch({\n      type: FETCH_ALL_BUYERS_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_BUYER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createBuyer = buyerData => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_BUYER\n    });\n    const response = await axios.post(`${hostServer}buyer/`, buyerData);\n    if (!response.data) {\n      throw new Error('Ошибка при создании покупателя: Сервер вернул пустой ответ.');\n    }\n    if (response.status >= 400) {\n      const errorMessage = response.data.message || \"Ошибка при создании покупателя\";\n      throw new Error(errorMessage);\n    }\n    dispatch({\n      type: CREATE_BUYER_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Ошибка при создании покупателя';\n    dispatch({\n      type: FETCH_BUYER_FAILURE,\n      payload: errorMessage\n    });\n    console.error('Ошибка при создании покупателя:', error);\n  }\n};\nexport const updateBuyer = (buyerId, updatedBuyerData) => async dispatch => {\n  dispatch({\n    type: FETCH_BUYER\n  });\n  try {\n    const response = await axios.put(`${hostServer}/api/buyer/${buyerId}`, updatedBuyerData);\n    dispatch({\n      type: UPDATE_BUYER_SUCCESS,\n      payload: response.data\n    });\n    return Promise.resolve();\n  } catch (error) {\n    let errorMessage = 'Ошибка при обновлении покупателя';\n    if (error.response) {\n      if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response.status === 404) {\n        errorMessage = 'Покупатель не найден';\n      } else {\n        errorMessage = `Ошибка сервера (${error.response.status})`;\n      }\n    } else if (error.request) {\n      errorMessage = 'Запрос не был отправлен';\n    } else {\n      errorMessage = error.message;\n    }\n    dispatch({\n      type: FETCH_BUYER_FAILURE,\n      payload: errorMessage\n    });\n    console.error(\"Ошибка обновления покупателя:\", error);\n  }\n};","map":{"version":3,"names":["axios","FETCH_BUYER","FETCH_BUYER_SUCCESS","FETCH_BUYER_FAILURE","FETCH_BUYER_BY_ID_SUCCESS","FETCH_ALL_BUYERS_SUCCESS","CREATE_BUYER_SUCCESS","UPDATE_BUYER_SUCCESS","hostServerJSON","hostServer","path","fetchBuyer","page","limit","dispatch","type","response","get","payload","data","currentPage","error","message","fetchBuyerById","buyerId","fetchAllBuyers","createBuyer","buyerData","post","Error","status","errorMessage","_error$response","_error$response$data","console","updateBuyer","updatedBuyerData","put","Promise","resolve","request"],"sources":["D:/University/React/LAB_7/client/src/actions/Buyer/buyerAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  FETCH_BUYER,\r\n  FETCH_BUYER_SUCCESS,\r\n  FETCH_BUYER_FAILURE,\r\n  FETCH_BUYER_BY_ID_SUCCESS,\r\n  FETCH_ALL_BUYERS_SUCCESS,\r\n  CREATE_BUYER_SUCCESS,\r\n  UPDATE_BUYER_SUCCESS\r\n} from '../../actionTypes';\r\nimport hostServerJSON from \"../hostServer.json\";\r\nconst hostServer = hostServerJSON.path;\r\n\r\nexport const fetchBuyer = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: FETCH_BUYER });\r\n  try {\r\n    const response = await axios.get(`${hostServer}buyer/?page=${page}&limit=${limit}`);\r\n    dispatch({ type: FETCH_BUYER_SUCCESS, payload: { ...response.data, currentPage: page, limit } });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_BUYER_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const fetchBuyerById = (buyerId) => async (dispatch) => {\r\n  dispatch({ type: FETCH_BUYER, payload: buyerId });\r\n  try {\r\n    const response = await axios.get(`${hostServer}buyer/${buyerId}/`);\r\n    dispatch({ type: FETCH_BUYER_BY_ID_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_BUYER_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const fetchAllBuyers = () => async (dispatch) => {\r\n  dispatch({ type: FETCH_BUYER });\r\n  try {\r\n    const response = await axios.get(`${hostServer}buyer/withoutPag`);\r\n    dispatch({ type: FETCH_ALL_BUYERS_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_BUYER_FAILURE, payload: error.message });\r\n  }\r\n}\r\n\r\nexport const createBuyer = (buyerData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FETCH_BUYER });\r\n\r\n    const response = await axios.post(`${hostServer}buyer/`, buyerData);\r\n\r\n    if (!response.data) {\r\n      throw new Error('Ошибка при создании покупателя: Сервер вернул пустой ответ.');\r\n    }\r\n\r\n    if (response.status >= 400) {\r\n      const errorMessage = response.data.message || \"Ошибка при создании покупателя\";\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    dispatch({ type: CREATE_BUYER_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    const errorMessage = error.response?.data?.message || error.message || 'Ошибка при создании покупателя';\r\n    dispatch({ type: FETCH_BUYER_FAILURE, payload: errorMessage });\r\n    console.error('Ошибка при создании покупателя:', error);\r\n  }\r\n};\r\n\r\nexport const updateBuyer = (buyerId, updatedBuyerData) => async (dispatch) => {\r\n  dispatch({ type: FETCH_BUYER });\r\n\r\n  try {\r\n    const response = await axios.put(`${hostServer}/api/buyer/${buyerId}`, updatedBuyerData);\r\n    dispatch({ type: UPDATE_BUYER_SUCCESS, payload: response.data });\r\n    return Promise.resolve();\r\n  } catch (error) {\r\n    let errorMessage = 'Ошибка при обновлении покупателя';\r\n    if (error.response) {\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message;\r\n      } else if (error.response.status === 404) {\r\n        errorMessage = 'Покупатель не найден';\r\n      } else {\r\n        errorMessage = `Ошибка сервера (${error.response.status})`;\r\n      }\r\n    }\r\n    else if (error.request) {\r\n      errorMessage = 'Запрос не был отправлен';\r\n    } else {\r\n      errorMessage = error.message;\r\n    }\r\n    dispatch({ type: FETCH_BUYER_FAILURE, payload: errorMessage });\r\n    console.error(\"Ошибка обновления покупателя:\", error);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}