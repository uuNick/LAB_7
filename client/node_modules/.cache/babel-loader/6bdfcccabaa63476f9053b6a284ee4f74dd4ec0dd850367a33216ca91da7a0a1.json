{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_SALE, FETCH_SALE_SUCCESS, FETCH_SALE_FAILURE, CREATE_SALE_SUCCESS, UPDATE_SALE_SUCCESS } from '../../actionTypes';\nimport hostServerJSON from \"../hostServer.json\";\nconst hostServer = hostServerJSON.path;\nexport const fetchSale = (page = 1, limit = 10) => async dispatch => {\n  dispatch({\n    type: FETCH_SALE\n  });\n  try {\n    const response = await axios.get(`${hostServer}Sale/?page=${page}&limit=${limit}`);\n    dispatch({\n      type: FETCH_SALE_SUCCESS,\n      payload: {\n        ...response.data,\n        currentPage: page,\n        limit\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_SALE_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createSale = saleData => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_SALE\n    });\n    const response = await axios.post(`${hostServer}sale/`, saleData);\n    if (!response.data) {\n      throw new Error('Ошибка при создании продажи: Ответ сервера не содержит данных.');\n    }\n    if (response.status === 400) {\n      let errorMessage = response.data.message || 'Ошибка при создании продажи';\n      if (errorMessage.includes('Контракт')) {\n        errorMessage = 'Контракт с указанным номером не существует';\n      } else if (errorMessage.includes('Мебель')) {\n        errorMessage = 'Мебель с указанным ID не существует';\n      }\n      throw new Error(errorMessage);\n    }\n    dispatch({\n      type: CREATE_SALE_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    let errorMessage = error.message;\n    if (error.response && error.response.status === 400 && error.response.data && error.response.data.message) {\n      errorMessage = error.response.data.message;\n    }\n    dispatch({\n      type: FETCH_SALE_FAILURE,\n      payload: error.message\n    });\n    console.error('Ошибка при создании продажи:', error);\n  }\n};\nexport const updateSale = (saleId, updatedSaleData) => async dispatch => {\n  dispatch({\n    type: FETCH_SALE\n  });\n  try {\n    const response = await axios.put(`${hostServer}sale/${saleId}`, updatedSaleData);\n    dispatch({\n      type: UPDATE_SALE_SUCCESS,\n      payload: response.data\n    });\n    return Promise.resolve();\n  } catch (error) {\n    let errorMessage = 'Ошибка при обновлении продажи';\n    if (error.response) {\n      if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response.status === 404) {\n        errorMessage = 'Продажа не найдена';\n      } else {\n        errorMessage = `Ошибка сервера (${error.response.status})`;\n      }\n    } else if (error.request) {\n      errorMessage = 'Запрос не был отправлен';\n    } else {\n      errorMessage = error.message;\n    }\n    dispatch({\n      type: FETCH_SALE_FAILURE,\n      payload: errorMessage\n    });\n    return Promise.reject({\n      message: errorMessage\n    });\n  }\n};","map":{"version":3,"names":["axios","FETCH_SALE","FETCH_SALE_SUCCESS","FETCH_SALE_FAILURE","CREATE_SALE_SUCCESS","UPDATE_SALE_SUCCESS","hostServerJSON","hostServer","path","fetchSale","page","limit","dispatch","type","response","get","payload","data","currentPage","error","message","createSale","saleData","post","Error","status","errorMessage","includes","console","updateSale","saleId","updatedSaleData","put","Promise","resolve","request","reject"],"sources":["D:/University/React/LAB_7/client/src/actions/Sale/saleAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  FETCH_SALE,\r\n  FETCH_SALE_SUCCESS,\r\n  FETCH_SALE_FAILURE,\r\n  CREATE_SALE_SUCCESS,\r\n  UPDATE_SALE_SUCCESS\r\n} from '../../actionTypes';\r\nimport hostServerJSON from \"../hostServer.json\";\r\nconst hostServer = hostServerJSON.path;\r\n\r\nexport const fetchSale = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: FETCH_SALE });\r\n  try {\r\n    const response = await axios.get(`${hostServer}Sale/?page=${page}&limit=${limit}`);\r\n    dispatch({ type: FETCH_SALE_SUCCESS, payload: { ...response.data, currentPage: page, limit } });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_SALE_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const createSale = (saleData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FETCH_SALE });\r\n\r\n    const response = await axios.post(`${hostServer}sale/`, saleData);\r\n\r\n    if (!response.data) {\r\n      throw new Error('Ошибка при создании продажи: Ответ сервера не содержит данных.');\r\n    }\r\n\r\n    if (response.status === 400) {\r\n      let errorMessage = response.data.message || 'Ошибка при создании продажи';\r\n      if (errorMessage.includes('Контракт')) {\r\n        errorMessage = 'Контракт с указанным номером не существует';\r\n      } else if (errorMessage.includes('Мебель')) {\r\n        errorMessage = 'Мебель с указанным ID не существует';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    dispatch({ type: CREATE_SALE_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    let errorMessage = error.message;\r\n    if (error.response && error.response.status === 400 && error.response.data && error.response.data.message) {\r\n      errorMessage = error.response.data.message;\r\n    }\r\n    dispatch({ type: FETCH_SALE_FAILURE, payload: error.message });\r\n    console.error('Ошибка при создании продажи:', error);\r\n  }\r\n};\r\n\r\nexport const updateSale = (saleId, updatedSaleData) => async (dispatch) => {\r\n  dispatch({ type: FETCH_SALE });\r\n\r\n  try {\r\n    const response = await axios.put(`${hostServer}sale/${saleId}`, updatedSaleData);\r\n    dispatch({ type: UPDATE_SALE_SUCCESS, payload: response.data });\r\n    return Promise.resolve();\r\n  } catch (error) {\r\n    let errorMessage = 'Ошибка при обновлении продажи';\r\n    if (error.response) {\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message;\r\n      } else if (error.response.status === 404) {\r\n        errorMessage = 'Продажа не найдена';\r\n      } else {\r\n        errorMessage = `Ошибка сервера (${error.response.status})`;\r\n      }\r\n    }\r\n    else if (error.request) {\r\n      errorMessage = 'Запрос не был отправлен';\r\n    } else {\r\n      errorMessage = error.message;\r\n    }\r\n    dispatch({ type: FETCH_SALE_FAILURE, payload: errorMessage });\r\n    return Promise.reject({ message: errorMessage });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}