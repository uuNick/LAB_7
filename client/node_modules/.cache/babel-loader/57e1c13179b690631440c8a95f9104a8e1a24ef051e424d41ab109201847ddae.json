{"ast":null,"code":"import { FETCH_BUYER, FETCH_BUYER_SUCCESS, FETCH_BUYER_FAILURE, FETCH_BUYER_BY_ID_SUCCESS, FETCH_ALL_BUYERS_SUCCESS, CREATE_BUYER_SUCCESS, UPDATE_BUYER_SUCCESS, DELETE_BUYER_SUCCESS, SORT_BUYER_SUCCESS, FIND_BUYER_SUCCESS } from '../actionTypes';\nconst initialState = {\n  buyer: [],\n  allBuyers: [],\n  selectedBuyer: null,\n  sortedBuyer: [],\n  findBuyer: [],\n  total: 0,\n  currentPage: 1,\n  totalPages: 0,\n  limit: 10,\n  loading: true,\n  error: null\n};\nconst buyerSlice = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_BUYER:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_BUYER_SUCCESS:\n      return handlePagination(state, action.payload, 'buyer');\n    case FETCH_BUYER_BY_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        selectedBuyer: action.payload,\n        error: null\n      };\n    case FETCH_ALL_BUYERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        allBuyers: action.payload,\n        error: null\n      };\n    case CREATE_BUYER_SUCCESS:\n      return {\n        ...state,\n        allBuyers: [...state.allBuyers, action.payload],\n        loading: false,\n        error: null\n      };\n    case UPDATE_BUYER_SUCCESS:\n      const updatedBuyers = state.allBuyers.map(buyer => buyer.buyer_id === action.payload.buyer_id ? action.payload : buyer);\n      return {\n        ...state,\n        allBuyers: updatedBuyers,\n        loading: false,\n        error: null\n      };\n    case DELETE_BUYER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        buyer: state.buyer.filter(item => item.buyer_id !== action.payload),\n        error: null\n      };\n    case SORT_BUYER_SUCCESS:\n      return handlePagination(state, action.payload, 'sortedBuyer');\n    case FIND_BUYER_SUCCESS:\n      return handlePagination(state, action.payload, 'findBuyer');\n    case FETCH_BUYER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst handlePagination = (state, payload, dataKey) => ({\n  ...state,\n  [dataKey]: payload.data,\n  total: payload.total,\n  currentPage: payload.currentPage,\n  totalPages: payload.pages,\n  loading: false,\n  error: null\n});\nexport default buyerSlice;","map":{"version":3,"names":["FETCH_BUYER","FETCH_BUYER_SUCCESS","FETCH_BUYER_FAILURE","FETCH_BUYER_BY_ID_SUCCESS","FETCH_ALL_BUYERS_SUCCESS","CREATE_BUYER_SUCCESS","UPDATE_BUYER_SUCCESS","DELETE_BUYER_SUCCESS","SORT_BUYER_SUCCESS","FIND_BUYER_SUCCESS","initialState","buyer","allBuyers","selectedBuyer","sortedBuyer","findBuyer","total","currentPage","totalPages","limit","loading","error","buyerSlice","state","action","type","handlePagination","payload","updatedBuyers","map","buyer_id","filter","item","dataKey","data","pages"],"sources":["D:/University/React/LAB_7/client/src/slices/buyerSlice.js"],"sourcesContent":["import {\r\n    FETCH_BUYER,\r\n    FETCH_BUYER_SUCCESS,\r\n    FETCH_BUYER_FAILURE,\r\n    FETCH_BUYER_BY_ID_SUCCESS,\r\n    FETCH_ALL_BUYERS_SUCCESS,\r\n    CREATE_BUYER_SUCCESS,\r\n    UPDATE_BUYER_SUCCESS,\r\n    DELETE_BUYER_SUCCESS,\r\n    SORT_BUYER_SUCCESS,\r\n    FIND_BUYER_SUCCESS\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    buyer: [],\r\n    allBuyers: [],\r\n    selectedBuyer: null,\r\n    sortedBuyer: [],\r\n    findBuyer: [],\r\n    total: 0,\r\n    currentPage: 1,\r\n    totalPages: 0,\r\n    limit: 10,\r\n    loading: true,\r\n    error: null,\r\n};\r\n\r\nconst buyerSlice = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_BUYER:\r\n            return { ...state, loading: true, error: null };\r\n        case FETCH_BUYER_SUCCESS:\r\n            return handlePagination(state, action.payload, 'buyer');\r\n        case FETCH_BUYER_BY_ID_SUCCESS:\r\n            return { ...state, loading: false, selectedBuyer: action.payload, error: null };\r\n        case FETCH_ALL_BUYERS_SUCCESS:\r\n            return { ...state, loading: false, allBuyers: action.payload, error: null };\r\n        case CREATE_BUYER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                allBuyers: [...state.allBuyers, action.payload],\r\n                loading: false,\r\n                error: null,\r\n            };\r\n\r\n        case UPDATE_BUYER_SUCCESS:\r\n            const updatedBuyers = state.allBuyers.map((buyer) =>\r\n                buyer.buyer_id === action.payload.buyer_id ? action.payload : buyer\r\n            );\r\n            return {\r\n                ...state,\r\n                allBuyers: updatedBuyers,\r\n                loading: false,\r\n                error: null,\r\n            };\r\n        case DELETE_BUYER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                buyer: state.buyer.filter(item => item.buyer_id !== action.payload),\r\n                error: null,\r\n            };\r\n        case SORT_BUYER_SUCCESS:\r\n            return handlePagination(state, action.payload, 'sortedBuyer');\r\n        case FIND_BUYER_SUCCESS:\r\n            return handlePagination(state, action.payload, 'findBuyer');\r\n        case FETCH_BUYER_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst handlePagination = (state, payload, dataKey) => ({\r\n    ...state,\r\n    [dataKey]: payload.data,\r\n    total: payload.total,\r\n    currentPage: payload.currentPage,\r\n    totalPages: payload.pages,\r\n    loading: false,\r\n    error: null,\r\n});\r\n\r\nexport default buyerSlice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}