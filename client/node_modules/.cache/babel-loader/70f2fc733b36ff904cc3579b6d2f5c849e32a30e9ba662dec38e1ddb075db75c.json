{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_CONTRACT, FETCH_CONTRACT_SUCCESS, FETCH_CONTRACT_FAILURE, CREATE_CONTRACT_SUCCESS } from '../../actionTypes';\nimport hostServerJSON from \"../hostServer.json\";\nconst hostServer = hostServerJSON.path;\nexport const fetchContract = (page = 1, limit = 10) => async dispatch => {\n  dispatch({\n    type: FETCH_CONTRACT\n  });\n  try {\n    const response = await axios.get(`${hostServer}Contract/?page=${page}&limit=${limit}`);\n    dispatch({\n      type: FETCH_CONTRACT_SUCCESS,\n      payload: {\n        ...response.data,\n        currentPage: page,\n        limit\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_CONTRACT_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createContract = contractData => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_CONTRACT\n    });\n    const response = await fetch(`${hostServer}contract/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contractData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      const errorMessage = errorData.message || 'Ошибка при создании контракта';\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    dispatch({\n      type: CREATE_CONTRACT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_CONTRACT_FAILURE,\n      payload: error.message\n    });\n    console.error('Ошибка при создании контракта:', error);\n  }\n};","map":{"version":3,"names":["axios","FETCH_CONTRACT","FETCH_CONTRACT_SUCCESS","FETCH_CONTRACT_FAILURE","CREATE_CONTRACT_SUCCESS","hostServerJSON","hostServer","path","fetchContract","page","limit","dispatch","type","response","get","payload","data","currentPage","error","message","createContract","contractData","fetch","method","headers","body","JSON","stringify","ok","errorData","json","errorMessage","Error","console"],"sources":["D:/University/React/LAB_7/client/src/actions/Contract/contractAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  FETCH_CONTRACT,\r\n  FETCH_CONTRACT_SUCCESS,\r\n  FETCH_CONTRACT_FAILURE,\r\n  CREATE_CONTRACT_SUCCESS\r\n} from '../../actionTypes';\r\nimport hostServerJSON from \"../hostServer.json\";\r\n\r\nconst hostServer = hostServerJSON.path;\r\n\r\nexport const fetchContract = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: FETCH_CONTRACT });\r\n  try {\r\n    const response = await axios.get(`${hostServer}Contract/?page=${page}&limit=${limit}`);\r\n    dispatch({ type: FETCH_CONTRACT_SUCCESS, payload: { ...response.data, currentPage: page, limit } });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_CONTRACT_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const createContract = (contractData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FETCH_CONTRACT });\r\n\r\n    const response = await fetch(`${hostServer}contract/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(contractData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      const errorMessage = errorData.message || 'Ошибка при создании контракта';\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    dispatch({ type: CREATE_CONTRACT_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_CONTRACT_FAILURE, payload: error.message });\r\n    console.error('Ошибка при создании контракта:', error);\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,cAAc,EACdC,sBAAsB,EACtBC,sBAAsB,EACtBC,uBAAuB,QAClB,mBAAmB;AAC1B,OAAOC,cAAc,MAAM,oBAAoB;AAE/C,MAAMC,UAAU,GAAGD,cAAc,CAACE,IAAI;AAEtC,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACzEA,QAAQ,CAAC;IAAEC,IAAI,EAAEX;EAAe,CAAC,CAAC;EAClC,IAAI;IACF,MAAMY,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAGR,UAAU,kBAAkBG,IAAI,UAAUC,KAAK,EAAE,CAAC;IACtFC,QAAQ,CAAC;MAAEC,IAAI,EAAEV,sBAAsB;MAAEa,OAAO,EAAE;QAAE,GAAGF,QAAQ,CAACG,IAAI;QAAEC,WAAW,EAAER,IAAI;QAAEC;MAAM;IAAE,CAAC,CAAC;EACrG,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdP,QAAQ,CAAC;MAAEC,IAAI,EAAET,sBAAsB;MAAEY,OAAO,EAAEG,KAAK,CAACC;IAAQ,CAAC,CAAC;EACpE;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,YAAY,IAAK,MAAOV,QAAQ,IAAK;EAClE,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEX;IAAe,CAAC,CAAC;IAElC,MAAMY,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGhB,UAAU,WAAW,EAAE;MACrDiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,YAAY;IACnC,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACe,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MACvC,MAAMC,YAAY,GAAGF,SAAS,CAACV,OAAO,IAAI,+BAA+B;MACzE,MAAM,IAAIa,KAAK,CAACD,YAAY,CAAC;IAC/B;IAEA,MAAMf,IAAI,GAAG,MAAMH,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAClCnB,QAAQ,CAAC;MAAEC,IAAI,EAAER,uBAAuB;MAAEW,OAAO,EAAEC;IAAK,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdP,QAAQ,CAAC;MAAEC,IAAI,EAAET,sBAAsB;MAAEY,OAAO,EAAEG,KAAK,CAACC;IAAQ,CAAC,CAAC;IAClEc,OAAO,CAACf,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EACxD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}