{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_CONTRACT, FETCH_CONTRACT_SUCCESS, FETCH_CONTRACT_FAILURE, CREATE_CONTRACT_SUCCESS, UPDATE_CONTRACT_SUCCESS } from '../../actionTypes';\nimport hostServerJSON from \"../hostServer.json\";\nconst hostServer = hostServerJSON.path;\nexport const fetchContract = (page = 1, limit = 10) => async dispatch => {\n  dispatch({\n    type: FETCH_CONTRACT\n  });\n  try {\n    const response = await axios.get(`${hostServer}Contract/?page=${page}&limit=${limit}`);\n    dispatch({\n      type: FETCH_CONTRACT_SUCCESS,\n      payload: {\n        ...response.data,\n        currentPage: page,\n        limit\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_CONTRACT_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createContract = contractData => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_CONTRACT\n    });\n    const response = await axios.post(`${hostServer}contract/`, contractData);\n    if (!response.data) {\n      throw new Error('Ошибка при создании контракта: Сервер вернул пустой ответ.');\n    }\n    if (response.status === 400) {\n      let errorMessage = response.data.message || 'Ошибка при создании контракта';\n      if (errorMessage.includes('Покупатель')) {\n        errorMessage = 'Покупатель с указанным ID не существует';\n      }\n      throw new Error(errorMessage);\n    }\n    dispatch({\n      type: CREATE_CONTRACT_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    let errorMessage = error.message;\n    if (error.response && error.response.status === 400 && error.response.data && error.response.data.message) {\n      errorMessage = error.response.data.message;\n    }\n    dispatch({\n      type: FETCH_CONTRACT_FAILURE,\n      payload: errorMessage\n    });\n    console.error('Ошибка при создании контракта:', error);\n  }\n};\nexport const updateContract = (contractId, updatedContractData) => async dispatch => {\n  dispatch({\n    type: FETCH_CONTRACT\n  });\n  try {\n    const response = await axios.put(`${hostServer}contract/${contractId}`, {\n      execution_date: updatedContractData.execution_date\n    });\n    dispatch({\n      type: UPDATE_CONTRACT_SUCCESS,\n      payload: response.data\n    });\n    return Promise.resolve();\n  } catch (error) {\n    console.log(error);\n    let errorMessage = 'Ошибка при обновлении контракта';\n    if (error.response) {\n      if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response.status === 404) {\n        errorMessage = 'Контракт не найден';\n      } else {\n        errorMessage = `Ошибка сервера (${error.response.status})`;\n      }\n    } else if (error.request) {\n      errorMessage = 'Запрос не был отправлен';\n    } else {\n      errorMessage = error.message;\n    }\n    dispatch({\n      type: FETCH_CONTRACT_FAILURE,\n      payload: errorMessage\n    });\n    return Promise.reject({\n      message: errorMessage\n    });\n  }\n};","map":{"version":3,"names":["axios","FETCH_CONTRACT","FETCH_CONTRACT_SUCCESS","FETCH_CONTRACT_FAILURE","CREATE_CONTRACT_SUCCESS","UPDATE_CONTRACT_SUCCESS","hostServerJSON","hostServer","path","fetchContract","page","limit","dispatch","type","response","get","payload","data","currentPage","error","message","createContract","contractData","post","Error","status","errorMessage","includes","console","updateContract","contractId","updatedContractData","put","execution_date","Promise","resolve","log","request","reject"],"sources":["D:/University/React/LAB_7/client/src/actions/Contract/contractAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  FETCH_CONTRACT,\r\n  FETCH_CONTRACT_SUCCESS,\r\n  FETCH_CONTRACT_FAILURE,\r\n  CREATE_CONTRACT_SUCCESS,\r\n  UPDATE_CONTRACT_SUCCESS\r\n} from '../../actionTypes';\r\nimport hostServerJSON from \"../hostServer.json\";\r\n\r\nconst hostServer = hostServerJSON.path;\r\n\r\nexport const fetchContract = (page = 1, limit = 10) => async (dispatch) => {\r\n  dispatch({ type: FETCH_CONTRACT });\r\n  try {\r\n    const response = await axios.get(`${hostServer}Contract/?page=${page}&limit=${limit}`);\r\n    dispatch({ type: FETCH_CONTRACT_SUCCESS, payload: { ...response.data, currentPage: page, limit } });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_CONTRACT_FAILURE, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const createContract = (contractData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FETCH_CONTRACT });\r\n\r\n    const response = await axios.post(`${hostServer}contract/`, contractData);\r\n\r\n    if (!response.data) {\r\n      throw new Error('Ошибка при создании контракта: Сервер вернул пустой ответ.');\r\n    }\r\n\r\n    if (response.status === 400) {\r\n      let errorMessage = response.data.message || 'Ошибка при создании контракта';\r\n      if (errorMessage.includes('Покупатель')) {\r\n        errorMessage = 'Покупатель с указанным ID не существует';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    dispatch({ type: CREATE_CONTRACT_SUCCESS, payload: response.data });\r\n  } catch (error) {\r\n    let errorMessage = error.message;\r\n    if (error.response && error.response.status === 400 && error.response.data && error.response.data.message) {\r\n      errorMessage = error.response.data.message;\r\n    }\r\n    dispatch({ type: FETCH_CONTRACT_FAILURE, payload: errorMessage });\r\n    console.error('Ошибка при создании контракта:', error);\r\n  }\r\n};\r\n\r\nexport const updateContract = (contractId, updatedContractData) => async (dispatch) => {\r\n  dispatch({ type: FETCH_CONTRACT });\r\n\r\n  try {\r\n    const response = await axios.put(`${hostServer}contract/${contractId}`, { execution_date: updatedContractData.execution_date });\r\n    dispatch({ type: UPDATE_CONTRACT_SUCCESS, payload: response.data });\r\n    return Promise.resolve();\r\n  } catch (error) {\r\n    console.log(error)\r\n    let errorMessage = 'Ошибка при обновлении контракта';\r\n    if (error.response) {\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message;\r\n      } else if (error.response.status === 404) {\r\n        errorMessage = 'Контракт не найден';\r\n      } else {\r\n        errorMessage = `Ошибка сервера (${error.response.status})`;\r\n      }\r\n    }\r\n    else if (error.request) {\r\n      errorMessage = 'Запрос не был отправлен';\r\n    } else {\r\n      errorMessage = error.message;\r\n    }\r\n    dispatch({ type: FETCH_CONTRACT_FAILURE, payload: errorMessage });\r\n    return Promise.reject({ message: errorMessage });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}